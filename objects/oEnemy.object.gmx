<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
hp = 100;
z = 0;
width = 32;
length = 32;
height = 32;
pitch = 0;

maxspd = 2;
fbspd = 0;
rlspd = 0;
jspd  = 0;

fb = 0;
rl = 0;
dashX = 0;
dashY = 0;
dashT = 0;
shootT = 0;
animT = 0;

shootArm = 1;

jheight = 3.6;
jump_timer = 0;
jump_frame = 15;
onGround = true;

eventT = 0;
aiShootT = 0;
aiShootDelay = 0;
aiJumpT = 0;
aiDash = 0;
aiDirX = 0;
aiDirY = 0;

deathAnimT = 2 * SECOND;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if oGame.countdownT &lt;= 0 {
    if hp &gt; 0 {
        if not instance_exists(oPlayer)  exit;
        
        var targetDir = point_direction(x, y, oPlayer.x, oPlayer.y);
        var diff = angle_difference(direction, targetDir);
        if abs(diff) &gt; 90 eventT = 0;
        direction += -diff / 8 * g.dt;
        pitch = point_direction(x, z + height / 2, oPlayer.x, oPlayer.z + oPlayer.height / 2);
        pitch = clamp(pitch, -45, 45);
        
        var maxDis = 256;
        var minDis = 32;
        if eventT &lt;= 0 {
            rl = choose(-1, 0, 1);
            var dis = point_distance(x, y, oPlayer.x, oPlayer.y);
            if dis &gt; maxDis {
                fb = 1;
            } else if dis &lt; minDis {
                fb = -1;
            } else {
                fb = choose(-1, 0, 1);
            }
            
            if (fb != 0 or rl != 0) and choose(true, false) {
                dashX = rl;
                dashY = fb;
                dashT = 30;
            }
            
            if dashT &lt;= 0 {
                if choose(true, false) {
                    jump_timer = jump_frame;
                    jspd = jheight;
                    onGround = false;
                }
            }
            
            eventT = SECOND;
        } else {
            eventT -= g.dt;
        }
        
        if aiShootT &gt; 0 {
            if shootT &lt;= 0 {
                with (instance_create(x + lengthdir_x(4, direction) + lengthdir_x(8 * shootArm, direction + 90),
                                      y + lengthdir_y(4, direction) + lengthdir_y(8 * shootArm, direction + 90),
                                      oProjectile))
                {
                    z = other.z + other.height / 2;
                    direction = other.direction + random_range(-6, 6);
                    pitch = other.pitch + random_range(-3, 3);
                    enemy = true;
                }
                
                if shootArm == 1  shootArm = -1;
                else shootArm = 1;
                
                shootT = SECOND / 6;
            }
            
            if (shootT &gt; 0){
                shootT -= g.dt;
            }
            
            aiShootT -= g.dt;
        } else {
            if aiShootDelay &gt; 0 {
                aiShootDelay -= g.dt;
            } else {
                aiShootT = random_range(SECOND, 3 * SECOND);
                aiShootDelay = random_range(2 * SECOND, 3 * SECOND);
            }
        }
        
        var spd = maxspd;
        
        if dashT &gt; 0 {
            fb = dashY;
            rl = dashX;
            spd *= 3;
            if onGround {
                animT += 0.25 * g.dt;
            } else {
                animT = 0;
            }
            dashT -= g.dt;
        } else {
            if rl != 0 or fb != 0 {
                animT += 0.125 * g.dt;
            } else {
                animT = 0;
            }
        }
        
        var xspd = lengthdir_x(fb * spd, direction) * g.dt + lengthdir_x(rl * spd, direction-90) * g.dt;
        var yspd = lengthdir_y(fb * spd, direction) * g.dt + lengthdir_y(rl * spd, direction-90) * g.dt;
        
        if dashT &gt; 0 and onGround {
            with(instance_create(x + random_range(-4, 4), y + random_range(-4, 4), oDust)) {
                z = other.z;
                direction = point_direction(0, 0, xspd, yspd);
                time = 20 + random_range(-5, 5)
            }
        }
        
        x += xspd;
        y += yspd;
        
        if dashT &lt;= 0 {
            jspd -= g.grav * g.dt;
            if jump_timer &gt; 0 {
                jump_timer--;
            }
        } else {
            jspd = 0;
        }
        if z + jspd &gt; 0 {
            z += jspd;
        } else {
            jspd = 0;
            z = 0;
            
            if not onGround {
                for (var i = 0; i &lt; 8; i++) {
                    with(instance_create(x, y, oDust)) {
                        x = other.x + random_range(-4, 4);
                        y = other.y + random_range(-4, 4);
                        z = other.z;
                        direction = i * 45 + random_range(-10, 10);
                        time = 20 + random_range(-5, 5)
                    }
                }
                
                onGround = true;
            }
        }
    } else {
        if deathAnimT &gt; 0 {
            dashT = 0;
            if floor(deathAnimT) mod 3 == 0 {
                with (instance_create(x + random_range(-width / 3, width / 3),
                                      y + random_range(-length / 3, length / 3),
                                      oExplosion)) {
                    z = other.z + other.height / 2 + random_range(-other.height / 3, other.height / 3);
                }
            }
            deathAnimT -= g.dt;
        } else {
            instance_destroy();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Enemy

shader_set(shBillboard);
shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 1, 0, 1, 1);
//draw_billboard(x, y, z + 12, sprite_index, 1, Model.x48);
d3d_submit_model(x, y, z + 12, sprite_index, 1, Model.x48);

shader_reset();

if dashT &gt; 0 {
    var subimg = 0;
    if dashX !=0 and dashY != 0 {
        subimg = 3;
    } else {
        if dashY != 0  subimg = 2;
    }
    if dashX == -1  subimg += 1;
    
    var dir = direction - 180;
    if dashY == -1  dir = direction;
    
    draw_billboard(x + lengthdir_x(0.1, dir), y + lengthdir_y(0.1, dir), z + 16, spDash, subimg, Model.x32);
}

// Shadow
var radius = 8 - z / 16;
if radius &lt; 0  radius = 0;
draw_set_colour(c_dkgray);
draw_shadow(x, y, radius);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
