<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
z = 0;
//height = 24;
width = 32;
length = 32;
height = 32;

hp = 100;
max_hp = 100;

fb = 0;
rl = 0;
dashX = 0;
dashY = 0;
dashT = 0;
enum Direction {
    None,
    Forward,
    Backward,
    Right,
    Left,
}
animT = 0;

base_acc     = 2;
base_fric    = 0.1;
acc  = base_acc;
fric = base_fric;

jheight = 3.6;
jump_timer = 0;
jump_frame = 15;
onGround = true;

maxspd = 2;
fbspd = 0;
rlspd = 0;
jspd  = 0;

deathAnimT = 2 * SECOND;

direction = 0;
pitch = 0;
sensitivity = 0.1;

// Shoot
shootArm = 1;
shoot_timer = -1;

if (instance_exists(oCamera)) {
    with (oCamera) {
        if (player == noone) {
            player = other.id;
            break;
        }
    }
} else {
    with (instance_create(x, y, oCamera))
        player = other.id;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if hp &lt;= 0 {
    if deathAnimT &gt; 0 {
        dashT = 0;
        if floor(deathAnimT) mod 3 == 0 {
            with (instance_create(x + random_range(-width / 3, width / 3),
                                  y + random_range(-length / 3, length / 3),
                                  oExplosion)) {
                z = other.z + other.height / 2 + random_range(-other.height / 3, other.height / 3);
            }
        }
        deathAnimT -= g.dt;
    } else {
        instance_destroy();
    }
    
    exit;
}

if oGame.countdownT &lt;= 0 {
    direction -= sensitivity * (display_mouse_get_x() - display_get_width() * 0.5);
    pitch += sensitivity * (display_mouse_get_y() - display_get_height() * 0.5);
    pitch = clamp(pitch, -45, 45);
    
    display_mouse_set(display_get_width() * 0.5, display_get_height() * 0.5);
    
    rl = keyboard_check(ord('D')) - keyboard_check(ord('A'));
    fb = keyboard_check(ord('W')) - keyboard_check(ord('S'));
    
    var spd = maxspd;
    
    if dashT &lt;= 0 and
       (fb != 0 or rl != 0) and
       (keyboard_check(vk_shift) or mouse_check_button(mb_right))
    {
        dashX = rl;
        dashY = fb;
        dashT = 30;
    }
    if dashT &gt; 0 {
        fb = dashY;
        rl = dashX;
        spd *= 3;
        if onGround {
            animT += 0.25 * g.dt;
        } else {
            animT = 0;
        }
        dashT -= g.dt;
    } else {
        if rl != 0 or fb != 0 {
            animT += 0.125 * g.dt;
        } else {
            animT = 0;
        }
    }
    
    var xspd = lengthdir_x(fb * spd, direction) * g.dt + lengthdir_x(rl * spd, direction-90) * g.dt;
    var yspd = lengthdir_y(fb * spd, direction) * g.dt + lengthdir_y(rl * spd, direction-90) * g.dt;
    
    var groundZ = 0;
    var water = false;
    if room == rmBattleLake and
       point_distance(x, y,
                      oArena.x + oArena.sprite_width / 2,
                      oArena.y + oArena.sprite_height / 2) &gt; oArena.sprite_width / 2
    {
        groundZ = -4;
        water = true;
    }
    
    if dashT &gt; 0 and onGround {
        with(instance_create(x + random_range(-4, 4), y + random_range(-4, 4), oDust)) {
            z = other.z;
            direction = point_direction(0, 0, xspd, yspd);
            time = 20 + random_range(-5, 5);
            if water  sprite_index = spWaterSplash;
        }
    }
    
    var offset = 128;
    var minArea = 0 - offset;
    var maxArea = 1024 + offset;
    if x + xspd &gt; minArea and x + xspd &lt; maxArea {
        x += xspd;
    }
    
    if y + yspd &gt; minArea and y + yspd &lt; maxArea {
        y += yspd;
    }
    
    if dashT &lt;= 0 {
        jspd -= g.grav * g.dt;
        if jump_timer &gt; 0 {
            jump_timer--;
        } else if keyboard_check(vk_space) {
            jump_timer = jump_frame;
            jspd = jheight;
            onGround = false;
        }
    } else {
        jspd = 0;
    }
    
    if z + jspd &gt; groundZ {
        z += jspd;
    } else {
        jspd = 0;
        z = groundZ;
        
        if not onGround {
            for (var i = 0; i &lt; 8; i++) {
                with(instance_create(x + random_range(-4, 4), y + random_range(-4, 4), oDust)) {
                    z = other.z;
                    direction = i * 45 + random_range(-10, 10);
                    time = 20 + random_range(-5, 5);
                    if water  sprite_index = spWaterSplash;
                }
            }
            
            onGround = true;
        }
    }
}


// Camera
var camDis = 32;
cdir = direction;
cpitch = pitch;
cxto = x;
cyto = y;
czto = z + height;
cxfrom = cxto + lengthdir_x(camDis, cdir - 180) * dcos(cpitch);
cyfrom = cyto + lengthdir_y(camDis, cdir - 180) * dcos(cpitch);
czfrom = czto + lengthdir_y(camDis, pitch - 180);
if czfrom &lt; 0.1 {
    czfrom = 0.1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
if oGame.countdownT &lt;= 0 {
    key_shoot = mouse_check_button(mb_left);
    
    if key_shoot &amp;&amp; shoot_timer &lt;= 0 {
        var dir = direction;
        var pit = pitch;
        var bulletX = x + lengthdir_x(4, direction) + lengthdir_x(8 * shootArm, direction + 90);
        var bulletY = y + lengthdir_y(4, direction) + lengthdir_y(8 * shootArm, direction + 90);
        var bulletZ = z + height / 2;
        
        var ray = c3d_raycast(cxfrom, cyfrom, czfrom,
                              lengthdir_x(1, direction) * dcos(pitch),
                              lengthdir_y(1, direction) * dcos(pitch),
                              lengthdir_y(1, pitch),
                              oEnemy);
        var rayObj = ray[0];
        
        var rayDis = point_distance_3d(bulletX, bulletY, bulletZ, ray[1], ray[2], ray[3]);
        if rayObj != noone and
           rayDis &gt; 64
        {
            dir = point_direction(bulletX, bulletY, oEnemy.x, oEnemy.y); //ray[1], ray[2]);
            pit = point_direction(bulletX, bulletZ, oEnemy.x, oEnemy.z + oEnemy.height / 2); //ray[1], ray[3]);
        }
        with (instance_create(bulletX, bulletY, oProjectile)) {
            z = bulletZ;
            direction = dir;
            pitch = pit;
        }
        
        shootArm = -shootArm;
        
        shoot_timer = SECOND / 6;
    }
    
    if (shoot_timer &gt; 0){
        shoot_timer -= g.dt;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Player
var subimg = 7;

if rl == 1 {
    subimg = 3 + animT mod 3;
} else if rl = -1 {
    subimg = 9 + animT mod 3;
}
if fb == 1 {
    subimg = 6 + animT mod 3;
} else if fb == -1 {
    subimg = 0 + animT mod 3;
}

shader_set(shBillboard);
shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 0, 1, 1, 1);
//draw_billboard(x, y, z + 12, sprite_index, 1, Model.x48);
d3d_submit_model(x, y, z + 12, sprite_index, subimg, Model.x48);

shader_reset();

if dashT &gt; 0 {
    var subimg = 0;
    if dashX !=0 and dashY != 0 {
        subimg = 3;
    } else {
        if dashY != 0  subimg = 2;
    }
    if dashX == -1  subimg += 1;
    
    var dir = direction - 180;
    if dashY == -1  dir = direction;
    
    draw_billboard(x + lengthdir_x(0.1, dir), y + lengthdir_y(0.1, dir), z + 16, spDash, subimg, Model.x32, false);
}

// Shadow
var radius = 8 - z / 16;
if radius &lt; 0  radius = 0;
draw_set_colour(c_dkgray);
draw_shadow(x, y, radius);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
