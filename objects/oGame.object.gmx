<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
if instance_number(oGame) &gt; 1 {
    instance_destroy();
    exit;
}

randomize();
scGlobal();
window_set_cursor(cr_none);
texture_set_repeat(true);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnProggy);
if g.debug show_debug_overlay(true);

g.fullscreen = true;
g.audio = true;

g.dt = 0;
g.skipFrame = false;

enum State {
    MainMenu,
    Overworld,
    Battle,
    End,
    Story,
}
state = State.MainMenu;
//room_goto(rmEnd);
enum MenuSelection {
    Play,
    Options,
    Exit,
    Total
}
enum MenuOptionsSelection {
    Audio,
    Fullscreen,
    Back,
    Total
}
menuText[MenuSelection.Play] = "Play";
menuText[MenuSelection.Options] = "Options";
menuText[MenuSelection.Exit] = "Exit";
optionsText[MenuOptionsSelection.Audio] = "Audio";
optionsText[MenuOptionsSelection.Fullscreen] = "Fullscreen";
optionsText[MenuOptionsSelection.Back] = "Back";
option = false;

mechPoint = noone;
point = noone;
last_point = noone;
lastWeapon = Weapon.Missile;
captured = Team.None;
init = true;

pointDone = 0;
if g.debug  pointDone = 2;

weapon = Weapon.Missile;
enum Weapon {
    Missile,
    Sniper,
    Machinegun,
    Total,
}
selectingWeapon = false;
story = true;
start = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update Delta Time
if g.skipFrame &lt;= 0 {
    g.dt = delta_time * SECOND / 1000000;
    if g.dt &gt; SECOND  g.dt = 0;
} else {
    g.dt = 0;
    g.skipFrame--;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
if g.debug and keyboard_check(vk_escape) game_end();
if keyboard_check(vk_f1) g.debug = !g.debug;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game
switch (state) {
    case State.MainMenu: {
        if (init) {
            option = false;
            menuSelected = MenuSelection.Play;
            optionsSelected = MenuOptionsSelection.Audio;
            init = false;
        }
        
        if not option {
            if keyboard_check_pressed(ord('W')) or keyboard_check_pressed(vk_up) {
                menuSelected = (menuSelected + MenuSelection.Total - 1) mod MenuSelection.Total;
                audio_play_sound(snSelect, 10, false);
            }
            if keyboard_check_pressed(ord('S')) or keyboard_check_pressed(vk_down) {
                menuSelected = (menuSelected + 1) mod MenuSelection.Total;
                audio_play_sound(snSelect, 10, false);
            }
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space)
            {
                option = false;
                switch (menuSelected) {
                    case MenuSelection.Play: {
                        room_goto(rmOverworld);
                        state = State.Overworld;
                        init = true;
                        audio_play_sound(snConfirm, 10, false);
                        start = true;
                    } break
                    case MenuSelection.Options: {
                        menuSelected = MenuOptionsSelection.Audio;
                        audio_play_sound(snConfirm, 10, false);
                        option = true;
                    } break
                    case MenuSelection.Exit: {
                        audio_play_sound(snConfirm, 10, false);
                        game_end();
                    } break
                }
            }
        } else {
            if keyboard_check_pressed(ord('W')) or keyboard_check_pressed(vk_up) {
                menuSelected = (menuSelected + MenuOptionsSelection.Total - 1) mod MenuOptionsSelection.Total;
                audio_play_sound(snSelect, 10, false);
            }
            if keyboard_check_pressed(ord('S')) or keyboard_check_pressed(vk_down) {
                menuSelected = (menuSelected + 1) mod MenuOptionsSelection.Total;
                audio_play_sound(snSelect, 10, false);
            }
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space)
            {
                switch (menuSelected) {
                    case MenuOptionsSelection.Audio: {
                        var vol = 1;
                        if g.audio  vol = 0;
                        g.audio = !g.audio;
                        audio_set_master_gain(0, vol);
                        audio_play_sound(snConfirm, 10, false);
                    } break
                    case MenuOptionsSelection.Fullscreen: {
                        window_set_fullscreen(!g.fullscreen);
                        g.fullscreen = !g.fullscreen;
                        audio_play_sound(snConfirm, 10, false);
                    } break
                    case MenuOptionsSelection.Back: {
                        menuSelected = MenuSelection.Options;
                        audio_play_sound(snConfirm, 10, false);
                        option = false;
                    } break
                }
            }
        }
    } break;
 
    case State.Overworld: {
        if (init) {
            if captured != Team.None  point.captured = captured;
            captured = Team.None;
            last_point = point;
            point = noone;
            var found = false;
            if last_point != noone and last_point.captured == Team.None {
                point = last_point;
            } else {
                with (oControlPoint) {
                    if other.pointDone &lt; 2 and pointName == "City"  continue;
                    /*
                    if other.last_point != noone and not found {
                        if other.last_point == id {
                            found = true;
                        }
                        continue;
                    }
                    */
                    if captured == Team.None {
                        other.point = id;
                        break;
                    }
                }
            }
            weapon = lastWeapon;
            selectingWeapon = false;
            
            init = false;
        }
        
        if not selectingWeapon {
            if keyboard_check_pressed(ord('D')) or
               keyboard_check_pressed(vk_right)
            {
                var first_point = noone;
                last_point = point;
                point = noone;
                var found = false;
                with (oControlPoint) {
                    if other.pointDone &lt; 2 and pointName == "City"  continue;
                    if first_point == noone and captured == Team.None {
                        first_point = id;
                    }
                    if other.last_point != noone and not found {
                        if other.last_point == id {
                            found = true;
                        }
                        continue;
                    }
                    if captured == Team.None {
                        other.point = id;
                        break;
                    }
                }
                if point == noone  point = first_point;
                if point != noone  audio_play_sound(snSelect, 10, false);
                else audio_play_sound(snCancel, 10, false);
            }
            if keyboard_check_pressed(ord('A')) or
               keyboard_check_pressed(vk_left)
            {
                var first_point = noone;
                last_point = point;
                point = noone;
                var found = false;
                with (oControlPoint) {
                    if other.pointDone &lt; 2 and pointName == "City"  continue;
                    if first_point == noone and captured == Team.None {
                        first_point = id;
                    }
                    if other.last_point != noone and not found {
                        if other.last_point == id {
                            found = true;
                        }
                        continue;
                    }
                    if captured == Team.None {
                        other.point = id;
                        break;
                    }
                }
                if point == noone  point = first_point;
                if point != noone  audio_play_sound(snSelect, 10, false);
                else audio_play_sound(snCancel, 10, false);
            }
            
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space) {
                if point != noone {
                    selectingWeapon = true;
                    audio_play_sound(snConfirm, 10, false);
                    mechPoint = point;
                    with (oPlayerOverworld) {
                        x = other.point.x - 10;
                        y = other.point.y;
                    }
                }
            }
            if keyboard_check_pressed(vk_escape)
            {
                room_goto(rmMainMenu);
                state = State.MainMenu;
                init = true;
                audio_play_sound(snCancel, 10, false);
            }
        } else {
            if keyboard_check_pressed(ord('D')) or
               keyboard_check_pressed(ord('W')) or
               keyboard_check_pressed(vk_right)
            {
                weapon = (weapon + 1) mod Weapon.Total;
                lastWeapon = weapon;
                audio_play_sound(snSelect, 10, false);
            }
            if keyboard_check_pressed(ord('A')) or
               keyboard_check_pressed(ord('S')) or
               keyboard_check_pressed(vk_left)
            {
                weapon = (weapon + Weapon.Total - 1) mod Weapon.Total;
                lastWeapon = weapon;
                audio_play_sound(snSelect, 10, false);
            }
            if keyboard_check_pressed(vk_escape) {
                selectingWeapon = false;
                audio_play_sound(snCancel, 10, false);
            }
            if keyboard_check_pressed(vk_enter) or keyboard_check_pressed(vk_space) {
                selectingWeapon = false;
                if point != noone {
                    audio_play_sound(snConfirm, 10, false);
                    var rm = rmOverworld;
                    switch point.pointName {
                        case "Lake": rm = rmBattleLake; break;
                        case "Forest": rm = rmBattleForest; break;
                        case "City": rm = rmBattleCity; break;
                    }
                    pointName = point.pointName;
                    room_goto(rm);
                    state = State.Battle;
                    init = true;
                }
            }
        }
    } break;
    case State.Battle: {
        if init {
            audio_play_sound(msBoss, 10, true);
            countdownT = 3 * SECOND;
            endScreenT = 4 * SECOND;
            init = false;
        }
        if g.debug {
            if keyboard_check_pressed(ord('P')) {
                var e = getMechEnemy();
                if e != noone  e.hp = 0;
            }
            if keyboard_check_pressed(ord('O')) {
                var p = getMechPlayer();
                if p != noone  p.hp = 0;
            }
        }
        if countdownT &gt; 0 {
            countdownT -= g.dt;
            
            if countdownT &lt;= 0 {
                display_mouse_set(display_get_width() * 0.5, display_get_height() * 0.5);
            }
        }
        if pointName == "Lake" or pointName == "City" {
            var e = getMechEnemy();
            var p = getMechPlayer();
            if e == noone or p == noone {
                if endScreenT &gt; 0 {
                    endScreenT -= g.dt;
                } else {
                    var win = false;
                    if e == noone {
                        captured = Team.Cyan;
                        pointDone++;
                        win = true;
                    }
                    if pointName == "City" and win {
                        room_goto(rmEnd);
                        state = State.End;
                    } else {
                        room_goto(rmOverworld);
                        state = State.Overworld;
                    }
                    init = true;
                }
            }
        } else {
            var p = getMechPlayer();
            var found = instance_exists(oArt);
            if not found or p == noone {
                if endScreenT &gt; 0 {
                    endScreenT -= g.dt;
                } else {
                    if not found {
                        captured = Team.Cyan;
                        pointDone++;
                    }
                    
                    room_goto(rmOverworld);
                    state = State.Overworld;
                    init = true;
                }
            }
        }
        
        if state == State.Overworld {
            audio_stop_sound(msBoss);
        }
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu
switch (state) {
    case State.MainMenu: {
        draw_set_colour(make_colour_rgb(97, 111, 64));
        if not option {
            for (var i = 0; i &lt; MenuSelection.Total; i++) {
                var text = "";
                if menuSelected == i  text += "&gt; ";
                if i == 0 {
                    if not start text += menuText[i];
                    else text += "Resume";
                } else {
                    text += menuText[i];
                }
                if menuSelected == i  text += " &lt;";
                
                draw_text(view_wview / 2,
                          view_hview / 2 - MenuSelection.Total * 12 / 2 + i * 12 + 10,
                          text);
            }
        } else {
            for (var i = 0; i &lt; MenuOptionsSelection.Total; i++) {
                var text = "";
                if menuSelected == i  text += "&gt; ";
                text += optionsText[i];
                if i == MenuOptionsSelection.Audio {
                    if g.audio {
                        text += ": On";
                    } else {
                        text += ": Off";
                    }
                } else if i == MenuOptionsSelection.Fullscreen {
                    if g.fullscreen {
                        text += ": On";
                    } else {
                        text += ": Off";
                    }
                }
                if menuSelected == i  text += " &lt;";
                
                draw_text(view_wview / 2,
                          view_hview / 2 - MenuOptionsSelection.Total * 12 / 2 + i * 12 + 10,
                          text);
            }
        }
        draw_set_colour(c_white);
    } break;
    
        
    case State.Story: {
        draw_set_colour(make_colour_rgb(97, 111, 64));
        draw_text(view_wview / 2,
                  view_hview / 2,
                  "You are given#the task to#expand");
        draw_set_colour(c_white);
    } break;
    
    case State.Battle: {
        //draw_set_colour(make_colour_rgb(97, 111, 64));
        if countdownT &gt; 0 {
            draw_text(view_wview / 2,
                      view_hview / 2,
                      string(ceil(countdownT / SECOND)));
        }
        var p = getMechPlayer();
        if p != noone and p.hp &lt;= 50 {
            // @todo: vignette
        }
        if pointName == "Lake" or pointName == "City" {
            var e = getMechEnemy();
            if e == noone and p == noone {
                draw_text(view_wview / 2,
                          view_hview / 2,
                          "Tie");
            } else if e == noone {
                draw_text(view_wview / 2,
                          view_hview / 2,
                          "Area Conquered");
            } else if p == noone {
                draw_text(view_wview / 2,
                          view_hview / 2,
                          "Mission Failed");
            }
        } else {
            var p = getMechPlayer();
            var found = instance_exists(oArt);
            if p == noone {
                draw_text(view_wview / 2,
                          view_hview / 2,
                          "Mission Failed");
            } else if not found {
                draw_text(view_wview / 2,
                          view_hview / 2,
                          "Area Conquered");
            }
        }
        draw_set_colour(c_white);
    } break;
    
    case State.End: {
        draw_set_colour(make_colour_rgb(97, 111, 64));
        draw_text(view_wview / 2,
                  view_hview / 2,
                  "You conquered#all areas.##The End.##Thank you#for playing! =)");
        draw_set_colour(c_white);
        if keyboard_check_pressed(vk_enter) or
           keyboard_check_pressed(vk_escape)
        {
            game_end();
        }
    } break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
switch (state) {
    case State.Overworld: {
        if not selectingWeapon {
            if point != noone {
                if last_point == noone {
                    //draw_sprite(spMechOverworld, 0,
                                //oPlayerOverworld.x, oPlayerOverworld.y);
                } else {
                    //draw_sprite(spMechOverworld, 0,
                                //point.x, point.y);
                }
                
                draw_sprite(spCursor, (current_time / 8) mod 2,
                            point.x + point.sprite_width / 2, point.y + point.sprite_height / 2);
                            
                var xx = view_wview / 2;
                var yy = view_hview - 8;
                draw_set_colour(make_colour_rgb(50, 79, 49));
                draw_rectangle(xx - string_width(point.pointName) / 2,
                               yy - string_height(point.pointName) / 2,
                               xx + string_width(point.pointName) / 2,
                               yy + string_height(point.pointName) / 2,
                               false);
                draw_set_colour(make_colour_rgb(97, 111, 64));
                draw_text(xx, yy, point.pointName);
                draw_set_colour(c_white);
            }
        } else {
            draw_sprite(spCursor, 1,
                            point.x + point.sprite_width / 2, point.y + point.sprite_height / 2);
                            
            var weaponName;
            weaponName[Weapon.Missile] = "Missile";
            weaponName[Weapon.Sniper] = "Sniper";
            weaponName[Weapon.Machinegun] = "Machinegun";
            var xx = view_wview / 2;
            var yy = view_hview / 2;
            var w = Weapon.Total * 8 + (Weapon.Total - 1) * 3;
            var h = 8;
            draw_set_colour(make_colour_rgb(50, 79, 49));
            draw_rectangle(xx - string_width(weaponName[Weapon.Machinegun]) / 2 - 3,
                           yy - h / 2 - 3,
                           xx + string_width(weaponName[Weapon.Machinegun]) / 2 + 2,
                           yy + h / 2 + 2 + string_height(weaponName[weapon]),
                           false);
            draw_set_colour(c_white);
            for (var i = 0; i &lt; Weapon.Total; i++) {
                var xxx = xx - w / 2 + i * 8 + 4 + i * 3;
                draw_sprite(spWeapons, i, xxx, yy);
                if i == weapon {
                    draw_sprite(spCursorLight, (current_time / 8) mod 2, xxx, yy);
                }
            }
            draw_set_colour(make_colour_rgb(97, 111, 64));
            draw_text(xx, yy + h / 2 + 2 + string_height(weaponName[weapon]) / 2, weaponName[weapon]);
            draw_set_colour(c_white);
        }
    } break;
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
