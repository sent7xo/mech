<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
init = true;
player = false;

z = 0;
width = 32;
length = 32;
height = 32;

hp = 100;
max_hp = 100;

fb = 0;
rl = 0;
dashX = 0;
dashY = 0;
dashT = 0;
dashDelayT = 0;

animT = 0;

jheight = 3.6;
jumpT = 0;
jumpFrame = 15;
onGround = true;

maxspd = 2;
fbspd = 0;
rlspd = 0;
jspd  = 0;
jumpCount = 0;
maxJump = 3;

deathAnimT = 2 * SECOND;

direction = 0;
pitch = 0;
sensitivity = 0.1;

// Shoot
shootArm = 1;
shootT = -1;
muzzle = false;

eventT = 0;
aiShootT = 0;
aiShootDelay = 0;
aiJumpT = 0;
aiDash = 0;
aiDirX = 0;
aiDirY = 0;

hurt = false;
xspd = 0;
yspd = 0;
camDis = 32;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
if init {
    if player {
        audio_sound_pitch(audio_play_sound(choose(snBattleCry, snBattleCry2), 10, false), random_range(0.8, 1));
        if instance_exists(oCamera) {
            with (oCamera) {
                if (player == noone) {
                    player = other.id;
                    break;
                }
            }
        } else {
            with (instance_create(x, y, oCamera))
                player = other.id;
        }
    }
    
    init = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement
if hp &lt;= 0 {
    if deathAnimT &gt; 0 {
        dashT = 0;
        if floor(deathAnimT) mod 3 == 0 {
            var ex  = audio_play_sound(snExplosion, 10, false);
            audio_sound_pitch(ex, random_range(0.8, 1));
            audio_sound_gain(ex, 0.75, 0);
            with (instance_create(x + random_range(-width / 3, width / 3),
                                  y + random_range(-length / 3, length / 3),
                                  oExplosion)) {
                z = other.z + other.height / 2 + random_range(-other.height / 3, other.height / 3);
            }
        }
        deathAnimT -= g.dt;
    } else {
        instance_destroy();
    }
    
    exit;
}

var p = getMechPlayer();
if p == noone or p.hp &lt;= 0  exit;

if oGame.countdownT &lt;= 0 {
    jump = false;
    dash = false;
    
    if player {
        direction -= sensitivity * (display_mouse_get_x() - display_get_width() * 0.5);
        pitch += sensitivity * (display_mouse_get_y() - display_get_height() * 0.5);
        pitch = clamp(pitch, -45, 45);
        
        display_mouse_set(display_get_width() * 0.5, display_get_height() * 0.5);
        
        rl = keyboard_check(ord('D')) - keyboard_check(ord('A'));
        fb = keyboard_check(ord('W')) - keyboard_check(ord('S'));
        
        jump = keyboard_check(vk_space);
        dash = keyboard_check(vk_shift) or mouse_check_button(mb_right);
    } else {
        scMechAIMovement();
    }
    
    if dashT &lt;= 0 and
       dashDelayT &lt;= 0 and
       (fb != 0 or rl != 0) and
       dash
    {
        dashX = rl;
        dashY = fb;
        dashT = 30;
        dashDelayT = 15;
        var d  = audio_play_sound(snDash, 10, false);
        if not player  audio_sound_gain(d, 0.3, 0);
    }
    var spd = maxspd;
    
    if dashT &gt; 0 {
        fb = dashY;
        rl = dashX;
        spd *= 3;
        if onGround {
            animT += 0.25 * g.dt;
        } else {
            animT = 0;
        }
        dashT -= g.dt;
    } else {
        if dashDelayT &gt; 0 dashDelayT -= g.dt;
        if rl != 0 or fb != 0 {
            animT += 0.125 * g.dt;
        } else {
            animT = 0;
        }
    }
    
    xspd = lengthdir_x(fb * spd, direction) * g.dt + lengthdir_x(rl * spd, direction-90) * g.dt;
    yspd = lengthdir_y(fb * spd, direction) * g.dt + lengthdir_y(rl * spd, direction-90) * g.dt;
    
    var groundZ = 0;
    var water = false;
    if room == rmBattleLake and
       point_distance(x, y,
                      oArena.x + oArena.sprite_width / 2,
                      oArena.y + oArena.sprite_height / 2) &gt; oArena.sprite_width / 2
    {
        groundZ = -4;
        water = true;
    }
    
    if dashT &gt; 0 and onGround {
        with(instance_create(x + random_range(-4, 4), y + random_range(-4, 4), oDust)) {
            z = other.z;
            direction = point_direction(0, 0, other.xspd, other.yspd);
            time = 20 + random_range(-5, 5);
            if water  sprite_index = spWaterSplash;
        }
    }
    
    var offset = 128;
    var minArea = 0 - offset;
    var maxArea = 1024 + offset;
    if x + xspd &gt; minArea and x + xspd &lt; maxArea and
       not place_meeting_3d(x + xspd, y, z, oBuilding) and
       not place_meeting_3d(x + xspd, y, z, oArt)
    {
        x += xspd;
    }
    
    if y + yspd &gt; minArea and y + yspd &lt; maxArea and
       not place_meeting_3d(x, y + yspd, z, oBuilding) and
       not place_meeting_3d(x, y + yspd, z, oArt)
    {
        y += yspd;
    }
    
    if place_meeting_3d(x, y, z, oBuilding) or
       place_meeting_3d(x, y, z, oArt)
    {
        x -= xspd;
    }
    
    if dashT &lt;= 0 {
        jspd -= g.grav * g.dt;
        if jumpT &gt; 0 {
            jumpT--;
        } else if jump and jumpCount &lt; maxJump {
            jumpT = jumpFrame;
            jspd = jheight;
            onGround = false;
            jumpCount++;
            var j = audio_play_sound(snJump, 10, false);
            if not player  audio_sound_gain(j, 0.3, 0);
        }
    } else {
        jspd = 0;
    }
    
    var building = place_meeting_3d(x, y, z + jspd, oBuilding) or place_meeting_3d(x, y, z + jspd, oArt);
    if z + jspd &gt; groundZ and not building {
        z += jspd;
    } else {
        jspd = 0;
        jumpCount = 0;
        //z = groundZ;
        if not water and z &lt; 0 z = 0;
        
        if not onGround and not building {
            for (var i = 0; i &lt; 8; i++) {
                with(instance_create(x + random_range(-4, 4), y + random_range(-4, 4), oDust)) {
                    z = other.z;
                    direction = i * 45 + random_range(-10, 10);
                    time = 20 + random_range(-5, 5);
                    if water  sprite_index = spWaterSplash;
                }
            }
            
            onGround = true;
        }
    }
}


// Camera
if player {
    camDis = 32;
    cdir = direction;
    cpitch = pitch;
    cxto = x;
    cyto = y;
    czto = z + height;
    cxfrom = cxto + lengthdir_x(camDis, cdir - 180) * dcos(cpitch);
    cyfrom = cyto + lengthdir_y(camDis, cdir - 180) * dcos(cpitch);
    czfrom = czto + lengthdir_y(camDis, pitch - 180);
    if czfrom &lt; 0.1 {
        czfrom = 0.1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
if oGame.countdownT &lt;= 0 {
    shoot = false;
    if player {
        shoot = mouse_check_button(mb_left);    
        if oGame.weapon == Weapon.Machinegun  muzzle = shoot;
    } else {
        scMechAIShoot();
    }
    
    if shoot and shootT &lt;= 0 {
        var dir = direction;
        var pit = pitch;
        var bulletX = x + lengthdir_x(4, direction) + lengthdir_x(8 * shootArm, direction + 90);
        var bulletY = y + lengthdir_y(4, direction) + lengthdir_y(8 * shootArm, direction + 90);
        var bulletZ = z + height / 2;
        
        if player {
        } else {
            var p = getMechPlayer();
            var targetDir = point_direction(x, y, p.x + p.xspd * 8, p.y + p.yspd * 8);
            dir = targetDir;
            //dir = direction + random_range(-6, 6);
            pit = pitch + random_range(-3, 3);
        }
        
        if player {
            var e = getMechEnemy();
            if oGame.pointName == "Forest"  e = oArt;
            var ray = c3d_raycast(cxfrom, cyfrom, czfrom,
                                  lengthdir_x(1, direction) * dcos(pitch),
                                  lengthdir_y(1, direction) * dcos(pitch),
                                  lengthdir_y(1, pitch),
                                  e);
            var rayObj = ray[0];
            
            var rayDis = point_distance_3d(bulletX, bulletY, bulletZ, ray[1], ray[2], ray[3]);
            if rayObj != noone and
               rayDis &gt; 64
            {
                dir = point_direction(bulletX, bulletY, rayObj.x, rayObj.y); //ray[1], ray[2]);
                pit = radtodeg(arctan2(z - rayObj.z,
                                       point_distance(bulletX, bulletY, rayObj.x, rayObj.y)));
                //point_direction(bulletX, bulletZ, e.x, e.z + e.height / 2); //ray[1], ray[3]);
            }
            
            switch (oGame.weapon) {
                case Weapon.Missile: {
                    with (instance_create(bulletX, bulletY, oProjectile)) {
                        z = bulletZ;
                        direction = dir;
                        pitch = pit;
                        enemy = not other.player;
                    }
                    var m  = audio_play_sound(snMissile, 10, false);
                    if not player  audio_sound_gain(m, 0.3, 0);
                    
                    shootArm = -shootArm;
                    
                    shootT = SECOND / 8;
                } break;
                
                case Weapon.Sniper: {
                    audio_sound_pitch(audio_play_sound(snSniper, 10, false), random_range(0.8, 1));
                    var valid = true;
                    var ray2;
                    if instance_number(oBuilding) &gt; 0 {
                        ray2 = c3d_raycast(cxfrom + lengthdir_x(camDis, direction) * dcos(pitch),
                                           cyfrom + lengthdir_y(camDis, direction) * dcos(pitch),
                                           czfrom + lengthdir_y(camDis, pitch),
                                  lengthdir_x(1, direction) * dcos(pitch),
                                  lengthdir_y(1, direction) * dcos(pitch),
                                  lengthdir_y(1, pitch),
                                  oBuilding);
                        if ray2[0] != noone and (ray[0] == noone or ray2[7] &lt; ray[7]) {
                            valid = false;
                            with (instance_create(ray2[1],
                                              ray2[2],
                                              oExplosion)) {
                                z = ray2[3];
                            }
                            
                            with (instance_create(x,
                                                  y,
                                                  oRay)) {
                                z = other.z + other.height / 2;
                                direction = other.direction;
                                var pointDis = point_distance(x, y, ray2[1], ray2[2]);
                                pitch = radtodeg(arctan2(z - ray2[3], pointDis));
                                dis = point_distance_3d(other.x, other.y, other.z + other.height / 2,
                                                        ray2[1], ray2[2], ray2[3]);
                            }
                        }
                    }
                    if rayObj != noone and valid {
                        audio_sound_pitch(audio_play_sound(snHitsound, 10, false), random_range(0.9, 1));
                        rayObj.hp -= 5;
                        g.skipFrame = 2;
                        rayObj.hurt = true;
                        with (instance_create(ray[1],
                                          ray[2],
                                          oExplosion)) {
                            z = ray[3];
                        }
                        
                        with (instance_create(x,
                                              y,
                                              oRay)) {
                            z = other.z + other.height / 2;
                            direction = other.direction;
                            var pointDis = point_distance(x, y, ray[1], ray[2]);
                            pitch = radtodeg(arctan2(z - ray[3], pointDis));
                            dis = point_distance_3d(other.x, other.y, other.z + other.height / 2,
                                                    ray[1], ray[2], ray[3]);
                        }
                        shootT = SECOND / 3;
                    } else {
                        if valid with (instance_create(x,
                                              y,
                                              oRay)) {
                            z = other.z + other.height / 2;
                            direction = other.direction;
                            pitch = other.pitch - 3;
                            
                            dis = 256;
                        }
                        shootT = SECOND / 2;
                    }
                } break
                
                case Weapon.Machinegun: {
                    audio_sound_pitch(audio_play_sound(snMachinegun, 10, false), random_range(0.8, 1));
                    var valid = true;
                    var ray2;
                    if instance_number(oBuilding) &gt; 0 {
                        ray2 = c3d_raycast(cxfrom + lengthdir_x(camDis, direction) * dcos(pitch),
                                           cyfrom + lengthdir_y(camDis, direction) * dcos(pitch),
                                           czfrom + lengthdir_y(camDis, pitch),
                                           lengthdir_x(1, direction) * dcos(pitch),
                                           lengthdir_y(1, direction) * dcos(pitch),
                                           lengthdir_y(1, pitch),
                                           oBuilding);
                        if ray2[0] != noone and (ray[0] == noone or ray2[7] &lt; ray[7]) {
                            valid = false;
                            with (instance_create(ray2[1],
                                              ray2[2],
                                              oExplosion)) {
                                z = ray2[3];
                            }
                        }
                    }
                    if rayObj != noone and valid {
                        audio_sound_pitch(audio_play_sound(snHitsound, 10, false), random_range(0.9, 1));
                        rayObj.hp -= 1;
                        g.skipFrame = 2;
                        rayObj.hurt = true;
                        
                        with (instance_create(ray[1],
                                              ray[2],
                                              oExplosion)) {
                            z = ray[3];
                        }
                    }
                    shootT = SECOND / 10;
                } break;
            }
        } else {
            with (instance_create(bulletX, bulletY, oProjectile)) {
                z = bulletZ;
                direction = dir;
                pitch = pit;
                enemy = not other.player;
            }
            
            shootArm = -shootArm;
            
            shootT = SECOND / 8;
        }
    }
    
    if (shootT &gt; 0){
        shootT -= g.dt;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oMech</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Player
/*
d3d_set_culling(false);
d3d_transform_add_rotation_y(pitch);
d3d_transform_add_rotation_z(direction);
d3d_transform_add_translation(x, y, z + height / 2);
d3d_draw_wall(0, -4, -4, 0, 4, 4, sprite_get_texture(spMuzzle, 0), 1, 1);
d3d_transform_set_identity();
d3d_set_culling(true);
*/

if muzzle and hp &gt; 0{
    draw_billboard(x + lengthdir_x(4, direction) + lengthdir_x(10, direction + 90),
                   y + lengthdir_y(4, direction) + lengthdir_y(10, direction + 90),
                   z + 8, spMuzzle, (current_time / 4) mod 2, Model.x8);
    draw_billboard(x + lengthdir_x(4, direction) + lengthdir_x(-10, direction + 90),
                   y + lengthdir_y(4, direction) + lengthdir_y(-10, direction + 90),
                   z + 8, spMuzzle, ((current_time + 4) / 4) mod 2, Model.x8);
}

if dashT &gt; 0 {
    var subimg = 0;
    if dashX !=0 and dashY != 0 {
        subimg = 3;
    } else {
        if dashY != 0  subimg = 2;
    }
    if dashX == -1  subimg += 1;
    
    var amount = 0.1
    var dir = direction - 180;
    if dashY == -1 {
        dir = direction;
        amount = 4;
    }
    
    draw_billboard(x + lengthdir_x(amount, dir), y + lengthdir_y(amount, dir), z + 16, spDash, subimg, Model.x32, false);
}

shader_set(shBillboard);
var subimg = 7;
if player {
    if rl == 1 {
        subimg = 3 + animT mod 3;
    } else if rl = -1 {
        subimg = 9 + animT mod 3;
    }
    if fb == 1 {
        subimg = 6 + animT mod 3;
    } else if fb == -1 {
        subimg = 0 + animT mod 3;
    }
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 0, 1, 1, 1);
} else {
    if keyboard_check(ord('M')) {
    shader_reset() exit
    }
    subimg = 1;
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 1, 0, 1, 1);
}

if hurt {
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uFlash'), 1);
} else {
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uFlash'), 0);
}
if muzzle  subimg = 7;
//draw_billboard(x, y, z + 12, sprite_index, 1, Model.x48);
d3d_submit_model(x, y, z + 12, sprite_index, subimg, Model.x48);

shader_reset();

// Shadow
var radius = 8 - z / 16;
if radius &lt; 0  radius = 0;
draw_set_colour(c_dkgray);
draw_shadow(x, y, radius);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
