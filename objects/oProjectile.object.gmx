<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spProjectile</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
z = 0;
spd = 16;
pitch = 0;
enemy = false;
dmg = 2;
sender = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move
var xx = x;
var yy = y;
var zz = z;
var found = noone;
with (oMech) {
    if other.enemy {
        if not player  continue;
    } else if player {
        continue;
    }
    
    // Closest point
    var cx = 0;
    if other.x &gt; x + width / 2  cx = x + width / 2;
    else if other.x &lt; x - width / 2  cx = x - width / 2;
    else cx = other.x;
    
    var cy = 0;
    if other.y &gt; y + length / 2  cy = y + length / 2;
    else if other.y &lt; y - length / 2  cy = y - length / 2;
    else cy = other.y;
    
    var cz = 0;
    if other.z &gt; z + height  cz = z + height;
    else if other.z &lt; z  cz = z;
    else cz = other.z;
    
    var radius = 8;
    var xx = cx - other.x;
    var yy = cy - other.y;
    var zz = cz - other.z;
    if xx * xx + yy * yy + zz * zz &lt; radius * radius {
        found = id;
        break
    }
}
if found == noone and not enemy with (oArt) {
    // Closest point
    var cx = 0;
    if other.x &gt; x + width / 2  cx = x + width / 2;
    else if other.x &lt; x - width / 2  cx = x - width / 2;
    else cx = other.x;
    
    var cy = 0;
    if other.y &gt; y + length / 2  cy = y + length / 2;
    else if other.y &lt; y - length / 2  cy = y - length / 2;
    else cy = other.y;
    
    var cz = 0;
    if other.z &gt; z + height  cz = z + height;
    else if other.z &lt; z  cz = z;
    else cz = other.z;
    
    var radius = 8;
    var xx = cx - other.x;
    var yy = cy - other.y;
    var zz = cz - other.z;
    if xx * xx + yy * yy + zz * zz &lt; radius * radius {
        found = id;
        break;
    }
}
if found == noone with (oBuilding) {
    // Closest point
    var cx = 0;
    if other.x &gt; x + width / 2  cx = x + width / 2;
    else if other.x &lt; x - width / 2  cx = x - width / 2;
    else cx = other.x;
    
    var cy = 0;
    if other.y &gt; y + length / 2  cy = y + length / 2;
    else if other.y &lt; y - length / 2  cy = y - length / 2;
    else cy = other.y;
    
    var cz = 0;
    if other.z &gt; z + height  cz = z + height;
    else if other.z &lt; z  cz = z;
    else cz = other.z;
    
    var radius = 8;
    var xx = cx - other.x;
    var yy = cy - other.y;
    var zz = cz - other.z;
    if xx * xx + yy * yy + zz * zz &lt; radius * radius {
        found = id;
        break;
    }
}
if found {
    var p = getMechPlayer();
    var ex = audio_play_sound(snExplosion, 10, false);
    audio_sound_pitch(ex, random_range(0.8, 1));
    if enemy and found != p  audio_sound_gain(ex, 0.3, 0);
    if found == p  audio_sound_pitch(audio_play_sound(snHit, 10, false), random_range(0.8, 1));
    else if found.object_index != oBuilding audio_sound_pitch(audio_play_sound(snHitsound, 10, false), random_range(0.9, 1));
    if found.object_index != oBuilding {
        with found {
            hp -= other.dmg;
            g.skipFrame = 2;
            hurt = true;
        }
    }
    with (instance_create(cx,
                          cy,
                          oExplosion)) {
        z = cz;
    }
    
    instance_destroy(other);
}

x += lengthdir_x(spd, direction) * g.dt;
y += lengthdir_y(spd, direction) * g.dt;
z += lengthdir_y(spd, pitch) * g.dt;

if x &lt; -3000 or x &gt; 3000 or
   y &lt; -3000 or y &gt; 3000 or
   z &lt; 0 or z &gt; 3000
{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
shader_set(shBillboard);
shader_set_uniform_f(shader_get_uniform(shBillboard, 'uFull'), true);

if enemy {
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 1, 0, 1, 1);
} else {
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 0, 1, 1, 1);
}
d3d_submit_model(x, y, z, sprite_index, 0, Model.x8);

shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
