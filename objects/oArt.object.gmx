<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spArtirelly</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
init = true;

z = 0;
width = 32;
length = 32;
height = 32;

hp = 50;
max_hp = 50;

animT = 0;

deathAnimT = 2 * SECOND;

direction = 0;
pitch = 0;
sensitivity = 0.1;

// Shoot
shootArm = 1;
shootT = -1;
muzzle = false;

eventT = 0;
aiShootT = 0;
aiShootDelay = random_range(1 * SECOND, 3 * SECOND);

hurt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hurt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Shoot
if hp &lt;= 0 {
    if deathAnimT &gt; 0 {
        if floor(deathAnimT) mod 3 == 0 {
            var ex  = audio_play_sound(snExplosion, 10, false);
            audio_sound_pitch(ex, random_range(0.8, 1));
            audio_sound_gain(ex, 0.75, 0);
            with (instance_create(x + random_range(-width / 3, width / 3),
                                  y + random_range(-length / 3, length / 3),
                                  oExplosion)) {
                z = other.z + other.height / 2 + random_range(-other.height / 3, other.height / 3);
            }
        }
        deathAnimT -= g.dt;
    } else {
        instance_destroy();
    }
    
    exit;
}

if oGame.countdownT &lt;= 0 {
    var mechPlayer = getMechPlayer();
    if mechPlayer == noone  exit;
    
    var targetDir = point_direction(x, y, mechPlayer.x + mechPlayer.xspd * 8, mechPlayer.y + mechPlayer.yspd * 8);
    //var diff = angle_difference(direction, targetDir);
    //if abs(diff) &gt; 90  eventT = 0;
    direction = targetDir; //+= -diff * g.dt;
    var pointDis = point_distance(x, y, mechPlayer.x + mechPlayer.xspd * 8, mechPlayer.y + mechPlayer.yspd * 8);
    pitch = radtodeg(arctan2(z - mechPlayer.z, pointDis));
    pitch = clamp(pitch, -45, 45);
    shoot = false;
    
    shoot = aiShootT &gt; 0;
    if aiShootT &gt; 0 {
        aiShootT -= g.dt;
    } else {
        if aiShootDelay &gt; 0 {
            aiShootDelay -= g.dt;
        } else {
            aiShootT = random_range(SECOND, 3 * SECOND);
            aiShootDelay = random_range(1 * SECOND, 2 * SECOND);
        }
    }
    
    if shoot and shootT &lt;= 0 {
        var dir = direction;
        var pit = pitch;
        var bulletX = x + lengthdir_x(4, direction) + lengthdir_x(8 * shootArm, direction + 90);
        var bulletY = y + lengthdir_y(4, direction) + lengthdir_y(8 * shootArm, direction + 90);
        var bulletZ = z + height / 2;
        
        
        with (instance_create(bulletX, bulletY, oProjectile)) {
            z = bulletZ;
            direction = dir;
            pitch = pit;
            enemy = true;
        }
        var m  = audio_play_sound(snMissile, 10, false);
        audio_sound_gain(m, 0.3, 0);
        
        shootArm = -shootArm;
        
        shootT = SECOND / 8;
    }
    
    if (shootT &gt; 0){
        shootT -= g.dt;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
shader_set(shBillboard);
if hurt {
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uFlash'), 1);
} else {
    shader_set_uniform_f(shader_get_uniform(shBillboard, 'uFlash'), 0);
}
shader_set_uniform_f(shader_get_uniform(shBillboard, 'uColour'), 1, 1, 1, 1);
d3d_submit_model(x, y, z + height / 2, sprite_index, 0, Model.x32);

shader_reset();


//draw_billboard(x, y, z + height / 2, sprite_index, 0, Model.x32);

// Shadow
var radius = 8 - z / 16;
if radius &lt; 0  radius = 0;
draw_set_colour(c_dkgray);
draw_shadow(x, y, radius);
draw_set_colour(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
